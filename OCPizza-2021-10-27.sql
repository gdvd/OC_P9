-- MySQL Script generated by MySQL Workbench
-- Wed Oct 27 15:18:20 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema OC_Pizza
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `OC_Pizza` ;

-- -----------------------------------------------------
-- Schema OC_Pizza
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `OC_Pizza` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;
USE `OC_Pizza` ;

-- -----------------------------------------------------
-- Table `OC_Pizza`.`category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`category` (
  `idcategory` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`idcategory`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`article`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`article` (
  `idarticle` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `with_ingredient` TINYINT(1) NOT NULL,
  `decription` TEXT(1024) NULL,
  `available` TINYINT(1) NOT NULL DEFAULT 1,
  `category_idcategory` INT NOT NULL,
  PRIMARY KEY (`idarticle`, `category_idcategory`),
  INDEX `fk_article_category1_idx` (`category_idcategory` ASC) VISIBLE,
  UNIQUE INDEX `nameAndCategoryUnique` (`name` ASC, `category_idcategory` ASC) VISIBLE,
  CONSTRAINT `fk_article_category1`
    FOREIGN KEY (`category_idcategory`)
    REFERENCES `OC_Pizza`.`category` (`idcategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`ingredient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`ingredient` (
  `idingredient` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  `unit` ENUM('gramme', 'kilo gramme', 'litre', 'unit√©') NOT NULL,
  PRIMARY KEY (`idingredient`),
  UNIQUE INDEX `nom_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`article2ingredient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`article2ingredient` (
  `article_idarticle` INT NOT NULL,
  `ingredient_idingredient` INT NOT NULL,
  `ingredient_quantity` DECIMAL(8,3) NOT NULL,
  PRIMARY KEY (`article_idarticle`, `ingredient_idingredient`),
  INDEX `fk_Article_has_ingredient_ingredient1_idx` (`ingredient_idingredient` ASC) VISIBLE,
  INDEX `fk_Article_has_ingredient_Article_idx` (`article_idarticle` ASC) VISIBLE,
  CONSTRAINT `fk_Article_has_ingredient_Article`
    FOREIGN KEY (`article_idarticle`)
    REFERENCES `OC_Pizza`.`article` (`idarticle`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Article_has_ingredient_ingredient1`
    FOREIGN KEY (`ingredient_idingredient`)
    REFERENCES `OC_Pizza`.`ingredient` (`idingredient`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`address` (
  `idaddress` INT NOT NULL AUTO_INCREMENT,
  `street` VARCHAR(255) NOT NULL,
  `zip` VARCHAR(6) NOT NULL,
  `city` VARCHAR(128) NOT NULL,
  `more_info` TEXT(1024) NULL,
  PRIMARY KEY (`idaddress`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`client` (
  `idclient` INT NOT NULL AUTO_INCREMENT,
  `last_name` VARCHAR(128) NOT NULL,
  `first_name` VARCHAR(128) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `phone` VARCHAR(12) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `address_idaddress` INT NOT NULL,
  PRIMARY KEY (`idclient`),
  INDEX `fk_client_adresse1_idx` (`address_idaddress` ASC) VISIBLE,
  UNIQUE INDEX `firstAndLastNameAndAddressUNIQUE` (`last_name` ASC, `first_name` ASC, `address_idaddress` ASC) VISIBLE,
  CONSTRAINT `fk_client_adresse1`
    FOREIGN KEY (`address_idaddress`)
    REFERENCES `OC_Pizza`.`address` (`idaddress`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`restaurant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`restaurant` (
  `idrestaurant` INT NOT NULL AUTO_INCREMENT,
  `name_restaurant` VARCHAR(255) NOT NULL,
  `phone` VARCHAR(12) NOT NULL,
  `url` VARCHAR(255) NOT NULL,
  `address_idaddress` INT NOT NULL,
  PRIMARY KEY (`idrestaurant`),
  INDEX `fk_restaurant_adresse1_idx` (`address_idaddress` ASC) VISIBLE,
  CONSTRAINT `fk_restaurant_adresse1`
    FOREIGN KEY (`address_idaddress`)
    REFERENCES `OC_Pizza`.`address` (`idaddress`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`order` (
  `idorder` INT NOT NULL AUTO_INCREMENT,
  `order_number` BIGINT(64) NOT NULL,
  `creation_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `paid` TINYINT(1) NOT NULL DEFAULT 0,
  `home_delivery` TINYINT(1) NOT NULL,
  `state` ENUM('prise en compte', 'en preparation', 'en livraison') NOT NULL,
  `commentary` VARCHAR(255) NULL,
  `client_idclient` INT NOT NULL,
  `restaurant_idrestaurant` INT NOT NULL,
  PRIMARY KEY (`idorder`),
  UNIQUE INDEX `order_number_UNIQUE` (`order_number` ASC) VISIBLE,
  INDEX `fk_commande_client1_idx` (`client_idclient` ASC) VISIBLE,
  INDEX `fk_commande_restaurant1_idx` (`restaurant_idrestaurant` ASC) VISIBLE,
  CONSTRAINT `fk_commande_client1`
    FOREIGN KEY (`client_idclient`)
    REFERENCES `OC_Pizza`.`client` (`idclient`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_commande_restaurant1`
    FOREIGN KEY (`restaurant_idrestaurant`)
    REFERENCES `OC_Pizza`.`restaurant` (`idrestaurant`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`etat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`etat` (
  `idetat` SMALLINT(8) NOT NULL,
  `nomEtat` VARCHAR(45) NOT NULL,
  `valeur` INT NOT NULL,
  PRIMARY KEY (`idetat`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`stock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`stock` (
  `idstock` INT NOT NULL AUTO_INCREMENT,
  `value` DECIMAL(8,3) NOT NULL,
  `creation_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `ingredient_idingredient` INT NOT NULL,
  PRIMARY KEY (`idstock`, `ingredient_idingredient`),
  INDEX `fk_stock_ingredient1_idx` (`ingredient_idingredient` ASC) VISIBLE,
  CONSTRAINT `fk_stock_ingredient1`
    FOREIGN KEY (`ingredient_idingredient`)
    REFERENCES `OC_Pizza`.`ingredient` (`idingredient`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`articleformat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`articleformat` (
  `idArticleFormat` INT NOT NULL AUTO_INCREMENT,
  `price` DECIMAL(8,2) NOT NULL,
  `format` ENUM('min', '', 'max') NOT NULL DEFAULT '',
  `article_idArticle` INT NOT NULL,
  PRIMARY KEY (`idArticleFormat`),
  INDEX `fk_articleformat_article1_idx` (`article_idArticle` ASC) VISIBLE,
  UNIQUE INDEX `articleAndFormatUNIQUE` (`article_idArticle` ASC, `format` ASC) VISIBLE,
  CONSTRAINT `fk_articleformat_article1`
    FOREIGN KEY (`article_idArticle`)
    REFERENCES `OC_Pizza`.`article` (`idarticle`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`order2articleformat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`order2articleformat` (
  `order_idorder` INT NOT NULL,
  `article2format_article_idArticle` INT NOT NULL,
  `quantity_article` INT NOT NULL,
  PRIMARY KEY (`order_idorder`, `article2format_article_idArticle`),
  INDEX `fk_commande_has_article2format_article2format1_idx` (`article2format_article_idArticle` ASC) VISIBLE,
  INDEX `fk_commande_has_article2format_commande1_idx` (`order_idorder` ASC) VISIBLE,
  CONSTRAINT `fk_commande_has_article2format_commande1`
    FOREIGN KEY (`order_idorder`)
    REFERENCES `OC_Pizza`.`order` (`idorder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_commande_has_article2format_article2format1`
    FOREIGN KEY (`article2format_article_idArticle`)
    REFERENCES `OC_Pizza`.`articleformat` (`idArticleFormat`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`employee` (
  `idemployee` INT NOT NULL AUTO_INCREMENT,
  `last_name` VARCHAR(128) NOT NULL,
  `first_name` VARCHAR(128) NOT NULL,
  `identification_number` VARCHAR(32) NOT NULL,
  `password` VARCHAR(255) NULL,
  PRIMARY KEY (`idemployee`),
  UNIQUE INDEX `identification_number_UNIQUE` (`identification_number` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`role` (
  `idrole` INT NOT NULL AUTO_INCREMENT,
  `role_name` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`idrole`),
  UNIQUE INDEX `role_name_UNIQUE` (`role_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`employee_has_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`employee_has_role` (
  `employee_idemployee` INT NOT NULL,
  `role_idrole` INT NOT NULL,
  PRIMARY KEY (`employee_idemployee`, `role_idrole`),
  INDEX `fk_employe_has_role_role1_idx` (`role_idrole` ASC) VISIBLE,
  INDEX `fk_employe_has_role_employe1_idx` (`employee_idemployee` ASC) VISIBLE,
  CONSTRAINT `fk_employe_has_role_employe1`
    FOREIGN KEY (`employee_idemployee`)
    REFERENCES `OC_Pizza`.`employee` (`idemployee`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_employe_has_role_role1`
    FOREIGN KEY (`role_idrole`)
    REFERENCES `OC_Pizza`.`role` (`idrole`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`employe_has_commande`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`employe_has_commande` (
  `employe_idemploye` INT NOT NULL,
  `order_idorder` INT NOT NULL,
  PRIMARY KEY (`employe_idemploye`, `order_idorder`),
  INDEX `fk_employe_has_commande_commande1_idx` (`order_idorder` ASC) VISIBLE,
  INDEX `fk_employe_has_commande_employe1_idx` (`employe_idemploye` ASC) VISIBLE,
  CONSTRAINT `fk_employe_has_commande_employe1`
    FOREIGN KEY (`employe_idemploye`)
    REFERENCES `OC_Pizza`.`employee` (`idemployee`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_employe_has_commande_commande1`
    FOREIGN KEY (`order_idorder`)
    REFERENCES `OC_Pizza`.`order` (`idorder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`employe_has_restaurant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`employe_has_restaurant` (
  `employe_idemploye` INT NOT NULL,
  `restaurant_idrestaurant` INT NOT NULL,
  PRIMARY KEY (`employe_idemploye`, `restaurant_idrestaurant`),
  INDEX `fk_employe_has_restaurant_restaurant1_idx` (`restaurant_idrestaurant` ASC) VISIBLE,
  INDEX `fk_employe_has_restaurant_employe1_idx` (`employe_idemploye` ASC) VISIBLE,
  CONSTRAINT `fk_employe_has_restaurant_employe1`
    FOREIGN KEY (`employe_idemploye`)
    REFERENCES `OC_Pizza`.`employee` (`idemployee`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_employe_has_restaurant_restaurant1`
    FOREIGN KEY (`restaurant_idrestaurant`)
    REFERENCES `OC_Pizza`.`restaurant` (`idrestaurant`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `OC_Pizza`.`payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OC_Pizza`.`payment` (
  `idpayment` INT NOT NULL AUTO_INCREMENT,
  `value` DECIMAL(9,2) NOT NULL DEFAULT 0,
  `type` ENUM('cash', 'CB', 'eMonaie', 'paypal') NOT NULL,
  `order_idorder` INT NOT NULL,
  PRIMARY KEY (`idpayment`, `order_idorder`),
  INDEX `fk_payment_order1_idx` (`order_idorder` ASC) VISIBLE,
  CONSTRAINT `fk_payment_order1`
    FOREIGN KEY (`order_idorder`)
    REFERENCES `OC_Pizza`.`order` (`idorder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `OC_Pizza`;

DELIMITER $$
USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`article2ingredient_BEFORE_INSERT` BEFORE INSERT ON `article2ingredient` FOR EACH ROW
BEGIN
IF NEW.ingredient_quantity <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`article2ingredient_BEFORE_UPDATE` BEFORE UPDATE ON `article2ingredient` FOR EACH ROW
BEGIN
IF NEW.ingredient_quantity <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`stock_BEFORE_INSERT` BEFORE INSERT ON `stock` FOR EACH ROW
BEGIN
IF NEW.value <0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value, or 0';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`stock_BEFORE_UPDATE` BEFORE UPDATE ON `stock` FOR EACH ROW
BEGIN
IF NEW.value <0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value, or 0';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`articleformat_BEFORE_INSERT` BEFORE INSERT ON `articleformat` FOR EACH ROW
BEGIN
IF NEW.price <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value, or 0';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`articleformat_BEFORE_UPDATE` BEFORE UPDATE ON `articleformat` FOR EACH ROW
BEGIN
IF NEW.price <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value, or 0';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`order2articleformat_BEFORE_INSERT` BEFORE INSERT ON `order2articleformat` FOR EACH ROW
BEGIN
IF NEW.quantity_article <0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`order2articleformat_BEFORE_UPDATE` BEFORE UPDATE ON `order2articleformat` FOR EACH ROW
BEGIN
IF NEW.quantity_article <0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`payment_BEFORE_INSERT` BEFORE INSERT ON `payment` FOR EACH ROW
BEGIN
IF NEW.value <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$

USE `OC_Pizza`$$
CREATE DEFINER = CURRENT_USER TRIGGER `OC_Pizza`.`payment_BEFORE_UPDATE` BEFORE UPDATE ON `payment` FOR EACH ROW
BEGIN
IF NEW.value <=0
THEN
SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Please insert a positive value';
END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
